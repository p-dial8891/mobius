// Copyright 2018 Google LLC
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
use std::ptr::null_mut;
use tokio::sync::mpsc::{self, Sender, Receiver};
use std::thread;
use windows::{
    core::PCSTR,
    Win32::Foundation::{LPARAM, LRESULT, WPARAM, BOOL},
    Win32::System::LibraryLoader::GetModuleHandleA,
    Win32::UI::WindowsAndMessaging::{SetWindowsHookExA, UnhookWindowsHookEx, KBDLLHOOKSTRUCT, WH_KEYBOARD_LL, WM_KEYDOWN},
    Win32::UI::WindowsAndMessaging::{CallNextHookEx, GetMessageA, PeekMessageA, MSG, HHOOK, PEEK_MESSAGE_REMOVE_TYPE},
};

static mut user_key: u32 = 0;
static mut HOOK_HANDLE: HHOOK = HHOOK(0);

// Callback function for the hook
unsafe extern "system" fn keyboard_hook_proc(code: i32, w_param: WPARAM, l_param: LPARAM) -> LRESULT {
    if code >= 0 && w_param.0 as u32 == WM_KEYDOWN {
        let kb_struct = *(l_param.0 as *const KBDLLHOOKSTRUCT);
        let key_code = kb_struct.vkCode;

        // Print the key code or check for specific keys
        println!("Key Pressed: {}", key_code);

        // For example, check if the 'ESC' key (key code 27) was pressed
		if key_code == 115 || key_code == 116 || key_code == 117 {
			user_key = key_code;
		}
        else if key_code == 27 {
            println!("Escape key pressed! Exiting...");
            // Exit the hook
            UnhookWindowsHookEx(HOOK_HANDLE as HHOOK);
            //std::process::exit(0);
        }
    }

    CallNextHookEx(HOOK_HANDLE as HHOOK, code, w_param, l_param)
}

async fn capture_key(tx : mpsc::Sender::<u32>) {
    unsafe {
        // Get the handle to the current module (required for the hook)
        let h_instance = GetModuleHandleA(PCSTR(null_mut())).unwrap();

        // Set the low-level keyboard hook
        HOOK_HANDLE = SetWindowsHookExA(WH_KEYBOARD_LL, Some(keyboard_hook_proc), h_instance, 0).unwrap();
        if HOOK_HANDLE == HHOOK(0) {
            eprintln!("Failed to set hook!");
            return;
        }

        println!("Hook set. Press 'ESC' to exit...");

        // Keep the program running to listen for key presses
        let mut msg = MSG::default();
		while !<BOOL as Into<bool>>::into((PeekMessageA(&mut msg, None, 0, 0, 
		PEEK_MESSAGE_REMOVE_TYPE(0))))  {
			if user_key != 0 {
				let key = user_key;
                if let Err(_) = tx.send(user_key).await {
					println!("Receiver dropped.");
				}
				println!("Key {key} received.");
				user_key = 0;
			}
		}
		println!("End");
    }

}


use clap::Parser;
use service::{init_tracing, WorldClient};
use std::{net::SocketAddr, time::Duration};
use tarpc::{client, context, tokio_serde::formats::Json};
use tokio::time::sleep;
use tracing::Instrument;

#[derive(Parser)]
struct Flags {
    /// Sets the server address to connect to.
    #[clap(long)]
    server_addr: SocketAddr,
    /// Sets the name to say hello to.
    #[clap(long)]
    name: String,
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
	let (tx, mut rx) = mpsc::channel(1);
    let flags = Flags::parse();
    init_tracing("Tarpc Example Client")?;
	println!("Tarpc Example client");

    let mut transport = tarpc::serde_transport::tcp::connect(flags.server_addr, Json::default);
    transport.config_mut().max_frame_length(usize::MAX);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let client = WorldClient::new(client::Config::default(), transport.await?).spawn();
	let winKeyT = tokio::spawn(capture_key(tx));

/*
    let hello = async move {
        // Send the request twice, just to be safe! ;)
        tokio::select! {
            hello1 = client.hello(context::current(), format!("{}1", flags.name)) => { hello1 }
            hello2 = client.hello(context::current(), format!("{}2", flags.name)) => { hello2 }
        }
    }
    .instrument(tracing::info_span!("Two Hellos"))
    .await;

*/
    let hello = client.hello(context::current(), "Phil".to_string()).await?;
    println!("{hello}");
	
    // Let the background span processor finish.
	while let Some(cmd) = rx.recv().await {
		println!("Command Received {cmd}");
	}
		
	sleep(Duration::from_millis(10)).await;
    opentelemetry::global::shutdown_tracer_provider();

    Ok(())
}